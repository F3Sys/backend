// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sql

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBattery = `-- name: CreateBattery :exec
INSERT INTO batteries (
        node_id,
        level,
        charging_time,
        discharging_time,
        charging,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, now())
`

type CreateBatteryParams struct {
	NodeID          pgtype.Int8
	Level           pgtype.Int4
	ChargingTime    pgtype.Int4
	DischargingTime pgtype.Int4
	Charging        pgtype.Bool
}

func (q *Queries) CreateBattery(ctx context.Context, arg CreateBatteryParams) error {
	_, err := q.db.Exec(ctx, createBattery,
		arg.NodeID,
		arg.Level,
		arg.ChargingTime,
		arg.DischargingTime,
		arg.Charging,
	)
	return err
}

const createEntryLog = `-- name: CreateEntryLog :exec
INSERT INTO entry_logs (node_id, visitor_id, type)
VALUES ($1, $2, $3)
`

type CreateEntryLogParams struct {
	NodeID    pgtype.Int8
	VisitorID pgtype.Int8
	Type      EntryLogsType
}

func (q *Queries) CreateEntryLog(ctx context.Context, arg CreateEntryLogParams) error {
	_, err := q.db.Exec(ctx, createEntryLog, arg.NodeID, arg.VisitorID, arg.Type)
	return err
}

const createExhibitionLog = `-- name: CreateExhibitionLog :exec
INSERT INTO exhibition_logs (node_id, visitor_id)
VALUES ($1, $2)
`

type CreateExhibitionLogParams struct {
	NodeID    pgtype.Int8
	VisitorID pgtype.Int8
}

func (q *Queries) CreateExhibitionLog(ctx context.Context, arg CreateExhibitionLogParams) error {
	_, err := q.db.Exec(ctx, createExhibitionLog, arg.NodeID, arg.VisitorID)
	return err
}

const createFoodStallLog = `-- name: CreateFoodStallLog :exec
INSERT INTO food_stall_logs (node_id, visitor_id, quantity)
VALUES ($1, $2, $3)
`

type CreateFoodStallLogParams struct {
	NodeID    pgtype.Int8
	VisitorID pgtype.Int8
	Quantity  int32
}

func (q *Queries) CreateFoodStallLog(ctx context.Context, arg CreateFoodStallLogParams) error {
	_, err := q.db.Exec(ctx, createFoodStallLog, arg.NodeID, arg.VisitorID, arg.Quantity)
	return err
}

const createVisitor = `-- name: CreateVisitor :one
INSERT INTO visitors (ip, random)
VALUES ($1, $2)
RETURNING id, quantity, random, created_at, updated_at, ip
`

type CreateVisitorParams struct {
	Ip     netip.Addr
	Random int32
}

func (q *Queries) CreateVisitor(ctx context.Context, arg CreateVisitorParams) (Visitor, error) {
	row := q.db.QueryRow(ctx, createVisitor, arg.Ip, arg.Random)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Random,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}

const getEntryLogByVisitorId = `-- name: GetEntryLogByVisitorId :one
SELECT id, node_id, visitor_id, type, created_at, updated_at
FROM entry_logs
WHERE visitor_id = $1
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetEntryLogByVisitorId(ctx context.Context, visitorID pgtype.Int8) (EntryLog, error) {
	row := q.db.QueryRow(ctx, getEntryLogByVisitorId, visitorID)
	var i EntryLog
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.VisitorID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeById = `-- name: GetNodeById :one
SELECT id, key, name, type, price, created_at, updated_at
FROM nodes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNodeById(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeById, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Type,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeByKey = `-- name: GetNodeByKey :one
SELECT id, key, name, type, price, created_at, updated_at
FROM nodes
WHERE key = $1
LIMIT 1
`

func (q *Queries) GetNodeByKey(ctx context.Context, key pgtype.Text) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeByKey, key)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Type,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVisitorById = `-- name: GetVisitorById :one
SELECT id, quantity, random, created_at, updated_at, ip
FROM visitors
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVisitorById(ctx context.Context, id int64) (Visitor, error) {
	row := q.db.QueryRow(ctx, getVisitorById, id)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Random,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}

const getVisitorByIdAndRandom = `-- name: GetVisitorByIdAndRandom :one
SELECT id, quantity, random, created_at, updated_at, ip
FROM visitors
WHERE id = $1
    AND random = $2
LIMIT 1
`

type GetVisitorByIdAndRandomParams struct {
	ID     int64
	Random int32
}

func (q *Queries) GetVisitorByIdAndRandom(ctx context.Context, arg GetVisitorByIdAndRandomParams) (Visitor, error) {
	row := q.db.QueryRow(ctx, getVisitorByIdAndRandom, arg.ID, arg.Random)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Random,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}

const getVisitorByIp = `-- name: GetVisitorByIp :one
SELECT id, quantity, random, created_at, updated_at, ip
FROM visitors
WHERE ip = $1
LIMIT 1
`

func (q *Queries) GetVisitorByIp(ctx context.Context, ip netip.Addr) (Visitor, error) {
	row := q.db.QueryRow(ctx, getVisitorByIp, ip)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Random,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}

const updateBattery = `-- name: UpdateBattery :exec
UPDATE batteries
SET level = coalesce($1, level),
    charging_time = coalesce($2, charging_time),
    discharging_time = coalesce($3, discharging_time),
    charging = coalesce($4, charging),
    updated_at = $5
WHERE node_id = $6
`

type UpdateBatteryParams struct {
	Level           pgtype.Int4
	ChargingTime    pgtype.Int4
	DischargingTime pgtype.Int4
	Charging        pgtype.Bool
	ID              pgtype.Timestamp
	NodeID          pgtype.Int8
}

func (q *Queries) UpdateBattery(ctx context.Context, arg UpdateBatteryParams) error {
	_, err := q.db.Exec(ctx, updateBattery,
		arg.Level,
		arg.ChargingTime,
		arg.DischargingTime,
		arg.Charging,
		arg.ID,
		arg.NodeID,
	)
	return err
}

const updateVisitorQuantity = `-- name: UpdateVisitorQuantity :exec
UPDATE visitors
SET quantity = $1
WHERE id = $2
`

type UpdateVisitorQuantityParams struct {
	Quantity int32
	ID       int64
}

func (q *Queries) UpdateVisitorQuantity(ctx context.Context, arg UpdateVisitorQuantityParams) error {
	_, err := q.db.Exec(ctx, updateVisitorQuantity, arg.Quantity, arg.ID)
	return err
}
