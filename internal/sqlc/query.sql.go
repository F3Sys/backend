// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sql

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntryLog = `-- name: CreateEntryLog :exec
INSERT INTO entry_logs
    (node_id, visitor_id, type)
VALUES
    ($1, $2, $3)
`

type CreateEntryLogParams struct {
	NodeID    pgtype.Text
	VisitorID pgtype.UUID
	Type      EntryLogsType
}

func (q *Queries) CreateEntryLog(ctx context.Context, arg CreateEntryLogParams) error {
	_, err := q.db.Exec(ctx, createEntryLog, arg.NodeID, arg.VisitorID, arg.Type)
	return err
}

const createExhibitionLog = `-- name: CreateExhibitionLog :exec
INSERT INTO exhibition_logs
    (node_id, visitor_id)
VALUES
    ($1, $2)
`

type CreateExhibitionLogParams struct {
	NodeID    pgtype.Text
	VisitorID pgtype.UUID
}

func (q *Queries) CreateExhibitionLog(ctx context.Context, arg CreateExhibitionLogParams) error {
	_, err := q.db.Exec(ctx, createExhibitionLog, arg.NodeID, arg.VisitorID)
	return err
}

const createFoodStallLog = `-- name: CreateFoodStallLog :exec
INSERT INTO food_stall_logs
    (node_id, visitor_id, quantity)
VALUES
    ($1, $2, $3)
`

type CreateFoodStallLogParams struct {
	NodeID    pgtype.Text
	VisitorID pgtype.UUID
	Quantity  int32
}

func (q *Queries) CreateFoodStallLog(ctx context.Context, arg CreateFoodStallLogParams) error {
	_, err := q.db.Exec(ctx, createFoodStallLog, arg.NodeID, arg.VisitorID, arg.Quantity)
	return err
}

const createVisitor = `-- name: CreateVisitor :one
INSERT INTO visitors
    (id, ip)
VALUES
    (gen_random_uuid(), $1)
RETURNING
    id, created_at, updated_at, ip
`

func (q *Queries) CreateVisitor(ctx context.Context, ip *netip.Addr) (Visitor, error) {
	row := q.db.QueryRow(ctx, createVisitor, ip)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}

const getEntryLogByNodeId = `-- name: GetEntryLogByNodeId :one
SELECT DISTINCT ON (node_id)
    id, node_id, visitor_id, type, created_at, updated_at
FROM
    entry_logs
WHERE
    node_id = $1
ORDER BY
    created_at DESC
LIMIT
    1
`

func (q *Queries) GetEntryLogByNodeId(ctx context.Context, nodeID pgtype.Text) (EntryLog, error) {
	row := q.db.QueryRow(ctx, getEntryLogByNodeId, nodeID)
	var i EntryLog
	err := row.Scan(
		&i.ID,
		&i.NodeID,
		&i.VisitorID,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodeById = `-- name: GetNodeById :one
SELECT id, password, name, type, price, created_at, updated_at FROM nodes
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetNodeById(ctx context.Context, id string) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeById, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Name,
		&i.Type,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVisitorById = `-- name: GetVisitorById :one
SELECT id, created_at, updated_at, ip FROM visitors
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetVisitorById(ctx context.Context, id pgtype.UUID) (Visitor, error) {
	row := q.db.QueryRow(ctx, getVisitorById, id)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}

const getVisitorByIp = `-- name: GetVisitorByIp :one
SELECT id, created_at, updated_at, ip FROM visitors
WHERE
    ip = $1
LIMIT
    1
`

func (q *Queries) GetVisitorByIp(ctx context.Context, ip *netip.Addr) (Visitor, error) {
	row := q.db.QueryRow(ctx, getVisitorByIp, ip)
	var i Visitor
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ip,
	)
	return i, err
}
